/*
 * This file is generated by jOOQ.
 */
package com.thee5176.ledger_command.record.domain.model.credential.tables.records;


import com.thee5176.ledger_command.record.domain.model.credential.tables.Users;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>credential.users.id</code>.
     */
    public UsersRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>credential.users.username</code>.
     */
    public UsersRecord setUsername(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>credential.users.password</code>.
     */
    public UsersRecord setPassword(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.password</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>credential.users.is_enabled</code>.
     */
    public UsersRecord setIsEnabled(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.is_enabled</code>.
     */
    public Boolean getIsEnabled() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>credential.users.is_account_non_expired</code>.
     */
    public UsersRecord setIsAccountNonExpired(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.is_account_non_expired</code>.
     */
    public Boolean getIsAccountNonExpired() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>credential.users.is_credentials_non_expired</code>.
     */
    public UsersRecord setIsCredentialsNonExpired(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.is_credentials_non_expired</code>.
     */
    public Boolean getIsCredentialsNonExpired() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>credential.users.is_account_non_locked</code>.
     */
    public UsersRecord setIsAccountNonLocked(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.is_account_non_locked</code>.
     */
    public Boolean getIsAccountNonLocked() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>credential.users.firstname</code>.
     */
    public UsersRecord setFirstname(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.firstname</code>.
     */
    public String getFirstname() {
        return (String) get(7);
    }

    /**
     * Setter for <code>credential.users.lastname</code>.
     */
    public UsersRecord setLastname(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.lastname</code>.
     */
    public String getLastname() {
        return (String) get(8);
    }

    /**
     * Setter for <code>credential.users.email</code>.
     */
    public UsersRecord setEmail(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>credential.users.email</code>.
     */
    public String getEmail() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(Long id, String username, String password, Boolean isEnabled, Boolean isAccountNonExpired, Boolean isCredentialsNonExpired, Boolean isAccountNonLocked, String firstname, String lastname, String email) {
        super(Users.USERS);

        setId(id);
        setUsername(username);
        setPassword(password);
        setIsEnabled(isEnabled);
        setIsAccountNonExpired(isAccountNonExpired);
        setIsCredentialsNonExpired(isCredentialsNonExpired);
        setIsAccountNonLocked(isAccountNonLocked);
        setFirstname(firstname);
        setLastname(lastname);
        setEmail(email);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(com.thee5176.ledger_command.record.domain.model.credential.tables.pojos.Users value) {
        super(Users.USERS);

        if (value != null) {
            setId(value.getId());
            setUsername(value.getUsername());
            setPassword(value.getPassword());
            setIsEnabled(value.getIsEnabled());
            setIsAccountNonExpired(value.getIsAccountNonExpired());
            setIsCredentialsNonExpired(value.getIsCredentialsNonExpired());
            setIsAccountNonLocked(value.getIsAccountNonLocked());
            setFirstname(value.getFirstname());
            setLastname(value.getLastname());
            setEmail(value.getEmail());
            resetTouchedOnNotNull();
        }
    }
}
