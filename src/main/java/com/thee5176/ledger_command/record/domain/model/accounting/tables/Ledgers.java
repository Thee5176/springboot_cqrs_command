/*
 * This file is generated by jOOQ.
 */
package com.thee5176.ledger_command.record.domain.model.accounting.tables;


import com.thee5176.ledger_command.record.domain.model.accounting.Accounting;
import com.thee5176.ledger_command.record.domain.model.accounting.Keys;
import com.thee5176.ledger_command.record.domain.model.accounting.tables.LedgerItems.LedgerItemsPath;
import com.thee5176.ledger_command.record.domain.model.accounting.tables.records.LedgersRecord;
import com.thee5176.ledger_command.record.domain.model.credential.tables.Users.UsersPath;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Ledgers extends TableImpl<LedgersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>accounting.ledgers</code>
     */
    public static final Ledgers LEDGERS = new Ledgers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LedgersRecord> getRecordType() {
        return LedgersRecord.class;
    }

    /**
     * The column <code>accounting.ledgers.id</code>.
     */
    public final TableField<LedgersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>accounting.ledgers.date</code>.
     */
    public final TableField<LedgersRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>accounting.ledgers.description</code>.
     */
    public final TableField<LedgersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>accounting.ledgers.created_at</code>.
     */
    public final TableField<LedgersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>accounting.ledgers.updated_at</code>.
     */
    public final TableField<LedgersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>accounting.ledgers.owner_id</code>.
     */
    public final TableField<LedgersRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Ledgers(Name alias, Table<LedgersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Ledgers(Name alias, Table<LedgersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>accounting.ledgers</code> table reference
     */
    public Ledgers(String alias) {
        this(DSL.name(alias), LEDGERS);
    }

    /**
     * Create an aliased <code>accounting.ledgers</code> table reference
     */
    public Ledgers(Name alias) {
        this(alias, LEDGERS);
    }

    /**
     * Create a <code>accounting.ledgers</code> table reference
     */
    public Ledgers() {
        this(DSL.name("ledgers"), null);
    }

    public <O extends Record> Ledgers(Table<O> path, ForeignKey<O, LedgersRecord> childPath, InverseForeignKey<O, LedgersRecord> parentPath) {
        super(path, childPath, parentPath, LEDGERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LedgersPath extends Ledgers implements Path<LedgersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LedgersPath(Table<O> path, ForeignKey<O, LedgersRecord> childPath, InverseForeignKey<O, LedgersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LedgersPath(Name alias, Table<LedgersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LedgersPath as(String alias) {
            return new LedgersPath(DSL.name(alias), this);
        }

        @Override
        public LedgersPath as(Name alias) {
            return new LedgersPath(alias, this);
        }

        @Override
        public LedgersPath as(Table<?> alias) {
            return new LedgersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Accounting.ACCOUNTING;
    }

    @Override
    public UniqueKey<LedgersRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<LedgersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEDGERS__LEDGER_ITEMS_USER_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>credential.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.LEDGERS__LEDGER_ITEMS_USER_FKEY, null);

        return _users;
    }

    private transient LedgerItemsPath _ledgerItems;

    /**
     * Get the implicit to-many join path to the
     * <code>accounting.ledger_items</code> table
     */
    public LedgerItemsPath ledgerItems() {
        if (_ledgerItems == null)
            _ledgerItems = new LedgerItemsPath(this, null, Keys.LEDGER_ITEMS__ENTRIES_TRANSACTION_ID_FKEY.getInverseKey());

        return _ledgerItems;
    }

    @Override
    public Ledgers as(String alias) {
        return new Ledgers(DSL.name(alias), this);
    }

    @Override
    public Ledgers as(Name alias) {
        return new Ledgers(alias, this);
    }

    @Override
    public Ledgers as(Table<?> alias) {
        return new Ledgers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ledgers rename(String name) {
        return new Ledgers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ledgers rename(Name name) {
        return new Ledgers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ledgers rename(Table<?> name) {
        return new Ledgers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ledgers where(Condition condition) {
        return new Ledgers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ledgers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ledgers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ledgers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ledgers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ledgers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ledgers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ledgers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ledgers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ledgers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
