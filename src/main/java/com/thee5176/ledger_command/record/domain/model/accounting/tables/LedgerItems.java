/*
 * This file is generated by jOOQ.
 */
package com.thee5176.ledger_command.record.domain.model.accounting.tables;


import com.thee5176.ledger_command.record.domain.model.accounting.Accounting;
import com.thee5176.ledger_command.record.domain.model.accounting.Keys;
import com.thee5176.ledger_command.record.domain.model.accounting.enums.BalanceType;
import com.thee5176.ledger_command.record.domain.model.accounting.tables.CodeOfAccount.CodeOfAccountPath;
import com.thee5176.ledger_command.record.domain.model.accounting.tables.Ledgers.LedgersPath;
import com.thee5176.ledger_command.record.domain.model.accounting.tables.records.LedgerItemsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LedgerItems extends TableImpl<LedgerItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>accounting.ledger_items</code>
     */
    public static final LedgerItems LEDGER_ITEMS = new LedgerItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LedgerItemsRecord> getRecordType() {
        return LedgerItemsRecord.class;
    }

    /**
     * The column <code>accounting.ledger_items.id</code>.
     */
    public final TableField<LedgerItemsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>accounting.ledger_items.ledger_id</code>.
     */
    public final TableField<LedgerItemsRecord, UUID> LEDGER_ID = createField(DSL.name("ledger_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>accounting.ledger_items.coa</code>.
     */
    public final TableField<LedgerItemsRecord, Integer> COA = createField(DSL.name("coa"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>accounting.ledger_items.amount</code>.
     */
    public final TableField<LedgerItemsRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>accounting.ledger_items.type</code>.
     */
    public final TableField<LedgerItemsRecord, BalanceType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(BalanceType.class), this, "");

    /**
     * The column <code>accounting.ledger_items.created_at</code>.
     */
    public final TableField<LedgerItemsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>accounting.ledger_items.updated_at</code>.
     */
    public final TableField<LedgerItemsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private LedgerItems(Name alias, Table<LedgerItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LedgerItems(Name alias, Table<LedgerItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>accounting.ledger_items</code> table reference
     */
    public LedgerItems(String alias) {
        this(DSL.name(alias), LEDGER_ITEMS);
    }

    /**
     * Create an aliased <code>accounting.ledger_items</code> table reference
     */
    public LedgerItems(Name alias) {
        this(alias, LEDGER_ITEMS);
    }

    /**
     * Create a <code>accounting.ledger_items</code> table reference
     */
    public LedgerItems() {
        this(DSL.name("ledger_items"), null);
    }

    public <O extends Record> LedgerItems(Table<O> path, ForeignKey<O, LedgerItemsRecord> childPath, InverseForeignKey<O, LedgerItemsRecord> parentPath) {
        super(path, childPath, parentPath, LEDGER_ITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LedgerItemsPath extends LedgerItems implements Path<LedgerItemsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LedgerItemsPath(Table<O> path, ForeignKey<O, LedgerItemsRecord> childPath, InverseForeignKey<O, LedgerItemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LedgerItemsPath(Name alias, Table<LedgerItemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LedgerItemsPath as(String alias) {
            return new LedgerItemsPath(DSL.name(alias), this);
        }

        @Override
        public LedgerItemsPath as(Name alias) {
            return new LedgerItemsPath(alias, this);
        }

        @Override
        public LedgerItemsPath as(Table<?> alias) {
            return new LedgerItemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Accounting.ACCOUNTING;
    }

    @Override
    public UniqueKey<LedgerItemsRecord> getPrimaryKey() {
        return Keys.ENTRIES_PKEY;
    }

    @Override
    public List<ForeignKey<LedgerItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEDGER_ITEMS__ENTRIES_COA_FKEY, Keys.LEDGER_ITEMS__ENTRIES_TRANSACTION_ID_FKEY);
    }

    private transient CodeOfAccountPath _codeOfAccount;

    /**
     * Get the implicit join path to the <code>accounting.code_of_account</code>
     * table.
     */
    public CodeOfAccountPath codeOfAccount() {
        if (_codeOfAccount == null)
            _codeOfAccount = new CodeOfAccountPath(this, Keys.LEDGER_ITEMS__ENTRIES_COA_FKEY, null);

        return _codeOfAccount;
    }

    private transient LedgersPath _ledgers;

    /**
     * Get the implicit join path to the <code>accounting.ledgers</code> table.
     */
    public LedgersPath ledgers() {
        if (_ledgers == null)
            _ledgers = new LedgersPath(this, Keys.LEDGER_ITEMS__ENTRIES_TRANSACTION_ID_FKEY, null);

        return _ledgers;
    }

    @Override
    public LedgerItems as(String alias) {
        return new LedgerItems(DSL.name(alias), this);
    }

    @Override
    public LedgerItems as(Name alias) {
        return new LedgerItems(alias, this);
    }

    @Override
    public LedgerItems as(Table<?> alias) {
        return new LedgerItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LedgerItems rename(String name) {
        return new LedgerItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LedgerItems rename(Name name) {
        return new LedgerItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LedgerItems rename(Table<?> name) {
        return new LedgerItems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LedgerItems where(Condition condition) {
        return new LedgerItems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LedgerItems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LedgerItems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LedgerItems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LedgerItems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LedgerItems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LedgerItems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LedgerItems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LedgerItems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LedgerItems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
